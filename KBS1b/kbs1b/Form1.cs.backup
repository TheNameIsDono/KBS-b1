using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace kbs1b
{
    public partial class Form1 : Form
    {
        Input input = new Input('W', 'A', 'S', 'D');
        Input input2 = new Input('U', 'H', 'J', 'K');
        int speed = 1;
        Player player1;
        Player player2;
        private List<Player> players = new List<Player>();
        int xMax, yMax;
        public Form1()
        {
            InitializeComponent();
            player1 = new Player(input);
            player2 = new Player(input2);
            player2.COLOR = Color.Green;
            player1.COLOR = Color.Red;
            players.Add(player1);
            players.Add(player2);
            xMax = pbCanvas.Size.Width - 35;
            yMax = pbCanvas.Size.Height - 35;
            timer1.Start();



        }

        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            Console.WriteLine("Keyvalue: " + e.KeyValue.ToString());
            foreach (Player player in players)
            {
                Console.WriteLine("player key: " + player.input.Up);

                if (e.KeyValue == player.input.Up)
                {
                    player.up = true;
                    return;
                }

                if (e.KeyValue == player.input.Down)
                {
                    player.down = true;
                    return;

                }

                if (e.KeyValue == player.input.Left)
                {
                    player.left = true;
                    return;

                }

                if (e.KeyValue == player.input.Right)
                {
                    player.right = true;
                    return;

                }
            }
        }

        private void Form1_KeyUp(object sender, KeyEventArgs e)
        {
            foreach (Player player in players)
            {


                if (e.KeyValue == player.input.Up)
                {
                    player.up = false;
                    return;
                }

                if (e.KeyValue == player.input.Down)
                {
                    player.down = false;
                    return;
                }

                if (e.KeyValue == player.input.Left)
                {
                    player.left = false;
                    return;
                }

                if (e.KeyValue == player.input.Right)
                {
                    player.right = false;
                    return;
                }
            }
        }




        private void timer1_Tick(object sender, EventArgs e)
        {
            foreach (Player player in players)
            {


                if (player.up)
                {
                   
                    if (player.YPOS - speed >= speed)
                    {
                        player.YPOS -= speed;

                    }
                }
                if (player.left)
                {
                   
                    if (player.XPOS - speed >= speed)
                    {

                        player.XPOS -= speed;

                    }
                }
                if (player.right)
                {
                    
                    if (player.XPOS + speed <= xMax)
                    {

                        player.XPOS += speed;

                    }
                }
                if (player.down)
                {
                   
                    if (player.YPOS + speed <= yMax)
                    {
                        player.YPOS += speed;

                    }

                }
                pbCanvas.Invalidate();
            }
            Random random = new Random();

            //player2.XPOS += random.Next(-5, 10);
            //player2.YPOS += random.Next(-5, 10);
            pbCanvas.Invalidate();
            if ((player1.XPOS + 35) >= player2.XPOS && (player1.XPOS) <= (player2.XPOS + 35)
                && (player1.YPOS + 35) >= player2.YPOS && (player1.YPOS) <= player2.YPOS + 35
                ||
                ((player2.XPOS + 35) >= player1.XPOS && (player2.XPOS) <= (player1.XPOS + 35)
                && (player2.YPOS + 35) >= player1.YPOS && (player2.YPOS) <= player1.YPOS + 35)

                )
            {
                Console.WriteLine("collision");

            }


        }



        public void pbCanvas_Paint(object sender, PaintEventArgs e)
        {
            base.OnPaint(e);
            {
                foreach (Player player in players)
                {
                    Rectangle rect = new Rectangle(player.XPOS, player.YPOS, 25, 25);
                    Color color = Color.FromArgb(255, 255, 0, 0);
                    Pen pen = new Pen(player.COLOR, 10);
                    e.Graphics.DrawRectangle(pen, rect);
                }

            }
        }

    }
}

